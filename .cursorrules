# ðŸš¨ STRICT CURSOR RULES - MANDATORY COMPLIANCE
# This file prevents unprofessional behavior and ensures focused task completion

# PRIMARY RULE: FOCUS ON TASK ONLY
focus_on_task_only: true
modify_only_requested: true
preserve_existing_functionality: true

# FORBIDDEN BEHAVIORS
forbidden_actions:
  - modify_unrelated_code_sections
  - change_styling_of_other_components
  - touch_code_outside_specific_task
  - make_improvements_not_requested
  - refactor_existing_working_code
  - assume_user_wants_cleanup
  - add_features_not_requested

# REQUIRED PROTOCOL
required_protocol:
  before_changes:
    - identify_exactly_what_needs_change
    - locate_only_specific_code_section
    - plan_minimal_change_required
    - verify_no_other_code_affected
  
  during_changes:
    - make_only_requested_modification
    - preserve_all_existing_styling
    - preserve_all_existing_functionality
    - dont_improve_or_cleanup_other_code
  
  after_changes:
    - verify_specific_task_works
    - confirm_other_components_unchanged
    - test_existing_functionality_preserved
    - report_only_what_was_changed

# VERIFICATION CHECKLIST
verification_checklist:
  - only_requested_feature_modified
  - no_unrelated_code_touched
  - existing_styling_preserved
  - other_components_work_as_before
  - no_unintended_side_effects

# EMERGENCY STOP CONDITIONS
emergency_stop:
  triggers:
    - about_to_modify_unrelated_code
    - about_to_change_existing_styling
    - about_to_touch_working_functionality
    - about_to_make_unrequested_improvements
  
  actions:
    - stop_immediately
    - ask_for_clarification
    - confirm_exact_scope
    - make_only_requested_change

# RESPONSE FORMAT REQUIREMENTS
response_format:
  required_sections:
    - what_was_changed_specific_to_request
    - what_was_preserved_existing_functionality
    - confirmation_of_no_side_effects
    - clear_scope_of_changes_made

# CODE QUALITY STANDARDS
code_quality:
  - no_unintended_side_effects
  - preserve_existing_visual_appearance
  - maintain_component_behavior
  - keep_working_functionality_intact

# EXAMPLES OF CORRECT BEHAVIOR
correct_examples:
  - request: "make cancel reason full width"
    action: "only modify cancel reason container width"
    result: "cancel reason is full width, everything else unchanged"
  
  - request: "add status action button"
    action: "only add the specific button for the requested status"
    result: "button added, existing functionality preserved"

# EXAMPLES OF FORBIDDEN BEHAVIOR
forbidden_examples:
  - request: "make cancel reason full width"
    wrong_action: "modify cancel reason AND change driver styling"
    result: "unintended side effects, wasted time"
  
  - request: "add status action"
    wrong_action: "refactor entire component and change other styling"
    result: "broken existing functionality"

# ENFORCEMENT
enforcement:
  strict_mode: true
  no_exceptions: true
  no_improvements: true
  no_side_effects: true
  only_requested_task: true

# MANDATORY COMPLIANCE
compliance:
  mandatory: true
  every_code_change: true
  no_skipping: true
  no_ignoring: true

# SERVER MANAGEMENT RULES
server_management:
  before_starting_dev_server:
    - check_if_port_3000_is_already_running
    - use_command: "netstat -ano | findstr :3000"
    - avoid_duplicate_servers
    - use_existing_server_when_available
  
  development_protocol:
    - test_changes_immediately_on_running_server
    - no_unnecessary_restarts_unless_required
    - check_for_errors_in_terminal_before_proceeding
    - verify_functionality_before_moving_to_next_phase 