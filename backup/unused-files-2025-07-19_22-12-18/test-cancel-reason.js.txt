const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testCancelReason() {
  try {
    console.log('üîç Testing Cancel Reason Functionality...\n');

    // Find canceled orders
    const canceledOrders = await prisma.order.findMany({
      where: {
        status: 'CANCELED'
      },
      select: {
        id: true,
        orderNumber: true,
        status: true,
        resonOfcancel: true,
        createdAt: true,
        updatedAt: true
      }
    });

    console.log(`üìã Found ${canceledOrders.length} canceled orders:\n`);

    canceledOrders.forEach((order, index) => {
      console.log(`${index + 1}. Order: ${order.orderNumber}`);
      console.log(`   Status: ${order.status}`);
      console.log(`   Cancel Reason: ${order.resonOfcancel || 'No reason provided'}`);
      console.log(`   Canceled At: ${order.updatedAt.toLocaleString('ar-SA')}`);
      console.log('');
    });

    // Test updating an order with cancel reason
    if (canceledOrders.length === 0) {
      console.log('‚ö†Ô∏è  No canceled orders found. Creating a test cancel...');
      
      // Find a PENDING order to cancel
      const pendingOrder = await prisma.order.findFirst({
        where: {
          status: 'PENDING'
        }
      });

      if (pendingOrder) {
        const testReason = 'Test cancel reason - ÿ™ŸÖ ÿ•ŸÑÿ∫ÿßÿ° ÿßŸÑÿ∑ŸÑÿ® ŸÑŸÑÿßÿÆÿ™ÿ®ÿßÿ±';
        
        const updatedOrder = await prisma.order.update({
          where: { id: pendingOrder.id },
          data: {
            status: 'CANCELED',
            resonOfcancel: testReason,
            updatedAt: new Date()
          }
        });

        console.log(`‚úÖ Test cancel created for order ${updatedOrder.orderNumber}`);
        console.log(`   Cancel Reason: ${updatedOrder.resonOfcancel}`);
      } else {
        console.log('‚ùå No PENDING orders found to test with');
      }
    }

  } catch (error) {
    console.error('‚ùå Error testing cancel reason:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testCancelReason(); 