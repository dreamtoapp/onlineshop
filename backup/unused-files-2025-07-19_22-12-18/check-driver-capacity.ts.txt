import { PrismaClient, OrderStatus } from '@prisma/client';

const prisma = new PrismaClient();

async function checkDriverCapacity() {
  try {
    console.log('üöö Checking driver capacity and availability...\n');
    
    // Get all drivers with their current orders
    const drivers = await prisma.user.findMany({
      where: {
        role: 'DRIVER',
        isActive: true
      },
      include: {
        driverOrders: {
          where: {
            status: {
              in: [OrderStatus.ASSIGNED, OrderStatus.IN_TRANSIT]
            }
          }
        }
      }
    });
    
    console.log(`üìä Found ${drivers.length} active drivers:\n`);
    
    drivers.forEach((driver, index) => {
      const currentOrders = driver.driverOrders.length;
      const maxOrders = driver.maxOrders || 5;
      const isAvailable = currentOrders < maxOrders;
      
      console.log(`${index + 1}. ${driver.name || 'Unknown Driver'}`);
      console.log(`   üì± Phone: ${driver.phone || 'N/A'}`);
      console.log(`   üì¶ Current Orders: ${currentOrders}/${maxOrders}`);
      console.log(`   üö¶ Status: ${isAvailable ? '‚úÖ Available' : '‚ùå At Capacity'}`);
      console.log(`   üöó Vehicle: ${driver.vehicleType || 'N/A'}`);
      
      if (currentOrders > 0) {
        console.log(`   üìã Active Orders:`);
        driver.driverOrders.forEach(order => {
          console.log(`      - ${order.orderNumber} (${order.status})`);
        });
      }
      console.log('');
    });
    
    // Find available drivers
    const availableDrivers = drivers.filter(d => d.driverOrders.length < (d.maxOrders || 5));
    
    console.log(`üéØ Available Drivers (${availableDrivers.length}):`);
    availableDrivers.forEach(driver => {
      console.log(`   ‚úÖ ${driver.name} - ${driver.driverOrders.length}/${driver.maxOrders || 5} orders`);
    });
    
    if (availableDrivers.length === 0) {
      console.log('\n‚ö†Ô∏è  No available drivers! All drivers are at capacity.');
      console.log('üí° Consider:');
      console.log('   1. Increasing driver capacity limits');
      console.log('   2. Unassigning some orders from busy drivers');
      console.log('   3. Adding more drivers to the system');
    }
    
  } catch (error) {
    console.error('‚ùå Error checking driver capacity:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkDriverCapacity(); 